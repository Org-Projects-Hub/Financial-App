{"version":3,"sources":["components/simulation/RunSimulation.tsx"],"names":["Wrapper","styled","div","_templateObject","ScreenCenter","_templateObject2","UserInfo","_templateObject3","tempCareer","annual_salary","education","federalTax","hourlyRate","medicare","monthlySalary","position","socialSecurity","stateTax","afterTaxMontlySalary","training","credit","insurance","RunSimulation","props","_useState","useState","_useState2","Object","_mnt_c_Users_ashis_Financial_App_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","simStage","setSimStage","_useState3","_useState4","myCareer","setMyCareer","_useState5","_useState6","boothsInfo","setBoothsInfo","_useState7","_useState8","currentBooth","setCurrentBooth","_useState9","_useState10","currentBalance","setCurrentBalance","_useState11","_useState12","visitedBooths","setVisitedBooths","_useState13","rent","transport","food","_useState14","notedVals","setNotedVals","useEffect","api","getAssignedJob","then","res","jobSelected","getJobDetail","catch","err","console","log","getBoothsInfo","success","booths","window","alert","length","setEvaluationVals","_mnt_c_Users_ashis_Financial_App_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","balance","income","setStage","jobname","setJobInBackend","arguments","undefined","replaceAll","occupation","y","parseFloat","toFixed","assignJob","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","Fragment","_index__WEBPACK_IMPORTED_MODULE_6__","increaseExpenses","newExpense","remainingBalance","career","className","style","marginTop","onClick"],"mappings":"yuBAOA,IAAMA,EAAUC,IAAOC,IAAVC,KAQPC,EAAeH,IAAOC,IAAVG,KAMZC,EAAWL,IAAOC,IAAVK,KA0BRC,EAAa,CACjBC,cAAe,mBACfC,UAAW,qBACXC,WAAY,OACZC,WAAY,QACZC,SAAU,mBACVC,cAAe,OACfC,SAAU,YACVC,eAAgB,mBAChBC,SAAU,kBACVC,qBAAsB,YACtBC,SAAU,EACVC,OAAQ,EACRC,UAAW,GAqLEC,UA7KO,SAACC,GAA8B,IAAAC,EACnBC,mBAAS,MADUC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC5CK,EAD4CH,EAAA,GAClCI,EADkCJ,EAAA,GAAAK,EAGnBN,mBAA6BjB,GAHVwB,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAG5CE,EAH4CD,EAAA,GAGlCE,EAHkCF,EAAA,GAAAG,EAIfV,mBAAS,MAJMW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAI5CE,EAJ4CD,EAAA,GAIhCE,EAJgCF,EAAA,GAAAG,EAKXd,mBAAS,GALEe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAK5CE,EAL4CD,EAAA,GAK9BE,EAL8BF,EAAA,GAAAG,EAMPlB,mBAAS,GANFmB,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GAM5CE,EAN4CD,EAAA,GAM5BE,EAN4BF,EAAA,GAAAG,EAOTtB,mBAAS,IAPAuB,EAAArB,OAAAC,EAAA,EAAAD,CAAAoB,EAAA,GAO5CE,EAP4CD,EAAA,GAO7BE,EAP6BF,EAAA,GAAAG,EASjB1B,mBAI/B,CAAE2B,KAAM,EAAGC,UAAW,EAAGC,KAAM,IAbiBC,EAAA5B,OAAAC,EAAA,EAAAD,CAAAwB,EAAA,GAS5CK,EAT4CD,EAAA,GASjCE,EATiCF,EAAA,GAkBnDG,oBAAU,WACRC,IACGC,iBACAC,KAAK,SAACC,GAAQ,IACPC,EAAgBD,EAAhBC,YACFA,EAAaC,EAAaD,GACzBjC,EAAY,mBAElBmC,MAAM,SAACC,GACNpC,EAAY,iBACZqC,QAAQC,IAAIF,MAEf,IAKHR,oBAAU,WACRZ,EAAkBb,EAASf,uBAC1B,CAACe,IAEJyB,oBAAU,WACQ,mBAAZ7B,GAAkCQ,GACpCsB,IACGU,gBACAR,KAAK,SAACC,GACDA,EAAIQ,SACNhC,EAAcwB,EAAIS,UAGrBN,MAAM,SAACC,GACNM,OAAOC,MAAM,uDAGlB,CAAC5C,IAKJ6B,oBAAU,WACQ,mBAAZ7B,GAAyD,GAAxBoB,EAAcyB,SACjDnD,EAAMoD,kBAANhD,OAAAiD,EAAA,EAAAjD,CAAA,GACK6B,EADL,CAEEqB,QAAShC,EACTiC,OAAQ7C,EAASnB,iBAEnBS,EAAMwD,SAAS,gBAEhB,CAAClD,IAKJ,IAAMmC,EAAe,SAACgB,GAAsD,IAArCC,EAAqCC,UAAAR,OAAA,QAAAS,IAAAD,UAAA,IAAAA,UAAA,GAC1EvB,IACGK,aAAagB,EAAQI,WAAW,IAAK,MACrCvB,KAAK,SAACwB,GACL,IAAIC,EAAYD,EAAW5E,cAAgB,GACrCU,EAAqBkE,EAArBlE,SAAUC,EAAWiE,EAAXjE,OAChBc,EAAY,CACVnB,SAAUiE,EACVlE,cAAeyE,WAAWD,EAAEE,QAAQ,IACpC/E,cAAe4E,EAAW5E,cAC1BG,WAAY0E,EAAI,IAChB3E,WAAgB,IAAJ2E,EACZtE,eAAoB,IAAJsE,EAChBzE,SAAc,KAAJyE,EACVrE,SAAc,KAAJqE,EACVjE,UAAe,KAAJiE,EACX5E,UAAW,WACXS,WACAC,SACAF,qBACEoE,EAAIA,GAAK,KAA8B,MAASnE,EAAWC,IAG/DU,EAAY,gBACRmD,GAAiBtB,IAAI8B,UAAUT,KAEpCf,MAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAmBhC,OACEwB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACgB,mBAAbhE,EACC6D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEhE,YAAaA,EACbW,aAAcA,EACd8B,OAAQlC,EACRQ,eAAgBA,EAChBkD,iBArBO,SAACC,GAEI,GAAhBvD,EACFgB,EAAa9B,OAAAiD,EAAA,EAAAjD,CAAA,GAAK6B,EAAN,CAAiBJ,KAAM4C,KACV,GAAhBvD,EACTgB,EAAa9B,OAAAiD,EAAA,EAAAjD,CAAA,GAAK6B,EAAN,CAAiBF,KAAM0C,KACV,GAAhBvD,GACTgB,EAAa9B,OAAAiD,EAAA,EAAAjD,CAAA,GAAK6B,EAAN,CAAiBH,UAAW2C,KAE1ClD,EAAkBD,EAAiBmD,IAa3BC,iBAAkBpD,EAAe2C,QAAQ,MAK7CE,EAAAC,EAAAC,cAAC5F,EAAD,KACE0F,EAAAC,EAAAC,cAACxF,EAAD,KACgB,kBAAbyB,GACC6D,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAS9B,aAAcA,IAEX,iBAAbnC,GACC6D,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYI,OAAQjE,IACpByD,EAAAC,EAAAC,cAAA,UACEO,UAAU,eACVC,MAAO,CAAEC,UAAW,MACpBC,QAAS,kBAAMxE,EAAY,qBAH7B,aASU,oBAAbD,GACC6D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACtF,EAAD,yBACoB,IACjB2B,EAASf,qBACN2B,EAAe2C,QAAQ,GACvB,IAENE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEhE,YAAaA,EACbY,gBAAiBA,EACjBL,WAAYA,EACZY,cAAeA,EACfC,iBAAkBA,EAClBL,eAAgBA","file":"static/js/8.ba2c2229.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport '../../style/simulation.css';\n\nimport { Spinner, JobSummary, BoothSelect, Booth } from '../index';\nimport api from '../../api';\n\nconst Wrapper = styled.div`\n  display: grid;\n  min-height: 100vh;\n  grid-template-columns: 25% 50% 25%;\n  place-items: center;\n  justify-items: center;\n`;\n\nconst ScreenCenter = styled.div`\n  grid-row: 1 / span 1;\n  grid-column: 2 / span 1;\n  text-align: center;\n`;\n\nconst UserInfo = styled.div`\n  grid-row: 1 / span 1;\n  grid-column: 1 / span 1;\n  padding: 4% 0;\n  color: white;\n\n  font-size: 1.05em;\n  font-weight: 500;\n`;\n\nexport interface career {\n  position: String;\n  monthlySalary: number;\n  annual_salary: number;\n  hourlyRate: number;\n  federalTax: number;\n  socialSecurity: number;\n  medicare: number;\n  stateTax: number;\n  education: string;\n  afterTaxMontlySalary: number;\n  training: number;\n  credit: number;\n  insurance: number;\n}\n\nconst tempCareer = {\n  annual_salary: 31137.600000000002,\n  education: 'HighSchool Diploma',\n  federalTax: 389.22,\n  hourlyRate: 16.2175,\n  medicare: 36.327200000000005,\n  monthlySalary: 2594.8,\n  position: 'Carpenter',\n  socialSecurity: 155.68800000000002,\n  stateTax: 85.62840000000001,\n  afterTaxMontlySalary: 1190.235648,\n  training: 0,\n  credit: 0,\n  insurance: 0,\n};\n\ninterface Props {\n  setStage: any;\n  setEvaluationVals: any;\n}\n\nconst RunSimulation = (props: Props): JSX.Element => {\n  const [simStage, setSimStage] = useState(null); //Used for switching between the stages of the simulation\n\n  const [myCareer, setMyCareer] = useState<career | undefined>(tempCareer);\n  const [boothsInfo, setBoothsInfo] = useState(null);\n  const [currentBooth, setCurrentBooth] = useState(0);\n  const [currentBalance, setCurrentBalance] = useState(0);\n  const [visitedBooths, setVisitedBooths] = useState([]);\n\n  const [notedVals, setNotedVals] = useState<{\n    rent: number;\n    transport: number;\n    food: number;\n  }>({ rent: 0, transport: 0, food: 0 });\n\n  /**\n   * Check if the user has already performed job selection. If so, don't let them select a new job\n   */\n  useEffect(() => {\n    api\n      .getAssignedJob()\n      .then((res) => {\n        let { jobSelected } = res;\n        if (jobSelected) getJobDetail(jobSelected);\n        else setSimStage('Job-Selection');\n      })\n      .catch((err) => {\n        setSimStage('Job-Selection');\n        console.log(err);\n      });\n  }, []);\n\n  /**\n   * Update Salary after a career is selected\n   */\n  useEffect(() => {\n    setCurrentBalance(myCareer.afterTaxMontlySalary);\n  }, [myCareer]);\n\n  useEffect(() => {\n    if (simStage == 'Booth-Selection' && !boothsInfo) {\n      api\n        .getBoothsInfo()\n        .then((res) => {\n          if (res.success) {\n            setBoothsInfo(res.booths);\n          }\n        })\n        .catch((err) => {\n          window.alert('Something went wrong. \\nPlease refresh the page!');\n        });\n    }\n  }, [simStage]);\n\n  /**\n   * Updates the stage of the simulation when all booths are visited\n   */\n  useEffect(() => {\n    if (simStage == 'Booth-Selection' && visitedBooths.length == 6) {\n      props.setEvaluationVals({\n        ...notedVals,\n        balance: currentBalance,\n        income: myCareer.monthlySalary,\n      });\n      props.setStage('evaluation');\n    }\n  }, [simStage]);\n  /**\n   * Gets details of the user selected job from backend and sets simStage to \"Job-Selected\"\n   * @param jobname Name of the job selected by user\n   */\n  const getJobDetail = (jobname: string, setJobInBackend: boolean = false) => {\n    api\n      .getJobDetail(jobname.replaceAll('/', '_')) // String needs to be fixed before sending to backend\n      .then((occupation: career) => {\n        let y: number = occupation.annual_salary / 12; // Monthly salary\n        let { training, credit } = occupation;\n        setMyCareer({\n          position: jobname,\n          monthlySalary: parseFloat(y.toFixed(2)),\n          annual_salary: occupation.annual_salary,\n          hourlyRate: y / 160,\n          federalTax: y * 0.15,\n          socialSecurity: y * 0.06,\n          medicare: y * 0.014,\n          stateTax: y * 0.033,\n          insurance: y * 0.035,\n          education: 'Bachelor',\n          training,\n          credit,\n          afterTaxMontlySalary:\n            y - y * (0.15 + 0.06 + 0.014 + 0.033 + 0.035) - training - credit,\n        });\n\n        setSimStage('Job-Selected'); // Change the state of \"RunSimulation\" component when donw\n        if (setJobInBackend) api.assignJob(jobname);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  /**\n   * Decreases the value of \"currentBalance\" after a purchase in \"Booth\" component\n   * @param newExpense The dollar amount of a new expense\n   */\n  const purchase = (newExpense: number) => {\n    // Update notedVals based on current booth\n    if (currentBooth == 2) {\n      setNotedVals({ ...notedVals, rent: newExpense });\n    } else if (currentBooth == 4) {\n      setNotedVals({ ...notedVals, food: newExpense });\n    } else if (currentBooth == 5) {\n      setNotedVals({ ...notedVals, transport: newExpense });\n    }\n    setCurrentBalance(currentBalance - newExpense);\n  };\n\n  return (\n    <>\n      {simStage === 'Booth-Selected' ? (\n        <div>\n          <Booth\n            setSimStage={setSimStage}\n            currentBooth={currentBooth}\n            booths={boothsInfo}\n            currentBalance={currentBalance}\n            increaseExpenses={purchase}\n            remainingBalance={currentBalance.toFixed(2)}\n          />\n          {/* <UserInfo>Remaining Income: {currentBalance.toFixed(2)}</UserInfo> */}\n        </div>\n      ) : (\n        <Wrapper>\n          <ScreenCenter>\n            {simStage === 'Job-Selection' && (\n              <Spinner getJobDetail={getJobDetail} />\n            )}\n            {simStage === 'Job-Selected' && (\n              <>\n                <JobSummary career={myCareer} />\n                <button\n                  className=\"customButton\"\n                  style={{ marginTop: '2%' }}\n                  onClick={() => setSimStage('Booth-Selection')}\n                >\n                  Continue\n                </button>\n              </>\n            )}\n            {simStage === 'Booth-Selection' && (\n              <div>\n                <UserInfo>\n                  Remaining Income:{' '}\n                  {myCareer.afterTaxMontlySalary\n                    ? currentBalance.toFixed(2)\n                    : ''}\n                </UserInfo>\n                <BoothSelect\n                  setSimStage={setSimStage}\n                  setCurrentBooth={setCurrentBooth}\n                  boothsInfo={boothsInfo}\n                  visitedBooths={visitedBooths}\n                  setVisitedBooths={setVisitedBooths}\n                  currentBalance={currentBalance}\n                />\n              </div>\n            )}\n          </ScreenCenter>\n        </Wrapper>\n      )}\n    </>\n  );\n};\n\nexport default RunSimulation;\n"],"sourceRoot":""}