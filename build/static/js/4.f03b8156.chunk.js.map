{"version":3,"sources":["style/preposttest.ts","utils/useStateCallback.ts","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/tests/TestInfoCard.tsx","components/tests/TestController.tsx"],"names":["styled","div","_templateObject","NumberStr","_templateObject2","QuestionStr","_templateObject3","OptionButton","button","_templateObject4","NavButton","_templateObject5","QuestionListButton","_templateObject6","Line","hr","_templateObject7","Arrow","img","_templateObject8","QuestionListCard","_templateObject9","ListHeading","_templateObject10","useStateCallback","initialState","_useState","useState","_useState2","Object","_mnt_c_Users_ashis_Financial_App_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","state","_setState","callbackRef","useRef","isFirstCallbackCall","setState","useCallback","setStateAction","callback","current","useEffect","_toConsumableArray","arr","Array","isArray","i","arr2","length","_arrayWithoutHoles","iter","Symbol","iterator","prototype","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","__webpack_require__","d","__webpack_exports__","TestInfoCard","_ref","stage","setShowInfoCard","react_default","a","createElement","width","style","margin","padding","preposttest","fontSize","Fragment","className","onClick","useBackendConnection","_useStateCallback","_useStateCallback2","slicedToArray","qNum","setQNum","_useStateCallback3","_useStateCallback4","selections","setSelections","loading","setLoading","_useState3","_useState4","showInfoCard","store","retriveTest","_store$current","submitAnswers","objectSpread","console","log","api","then","res","x","answers","changePointer","catch","err","testType","updateTest","TestController","props","questionList","Tests","questions","answerList","_useBackendConnection","_useState5","_useState6","answered","setAnswered","nav","next","withFinish","window","confirm","setStage","setTimeout","back","set","selected","data","tests_TestInfoCard","components","save","qNumber","answer","temp","toConsumableArray","storeSel","parseInt"],"mappings":"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","file":"static/js/4.f03b8156.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport React from 'react';\nimport { Card } from './styled';\n\nconst Container = styled.div`\n  min-width: 50%;\n  max-width: 50%;\n`;\n\nconst NumberStr = styled.div`\n  color: #8c8c8c;\n  margin: 2.5% 0;\n  text-align: center;\n  font-size: 12px;\n  font-weight: bold;\n\n  &:hover {\n    cursor: default;\n  }\n`;\n\nconst QuestionStr = styled.div`\n  color: #005191;\n  padding-bottom: 15px;\n  text-align: center;\n  font-size: 1.35em;\n  font-weight: bold;\n`;\n\nconst OptionButton = styled.button`\n  background-color: #539ed0;\n  color: white;\n  margin: 5px;\n  min-width: 200px;\n  min-height: 30px;\n  border: none;\n  border-radius: 4px;\n\n  &:focus {\n    background-color: white;\n  }\n\n  &:hover {\n    cursor: pointer;\n    color: #f8b332;\n    box-shadow: 4px 4px 2px #b5b5b5;\n    font-size: 104%;\n  }\n\n  &:disabled {\n    color: #005191;\n    background-color: #ffb93e;\n\n    box-shadow: 2px 2px 4px #adadad;\n    font-weight: normal;\n    &:hover {\n      cursor: default;\n      box-shadow: 4px 4px 2px #b5b5b5;\n    }\n  }\n`;\n\nconst NavButton = styled.button`\n  background-color: #fcb23d;\n  color: white;\n  margin: 5px;\n  min-width: 100px;\n  min-height: 40px;\n  border: none;\n\n  border-radius: 5px;\n  font-weight: 600;\n  font-size: 1.15em;\n\n  margin-top: 1vh;\n\n  // &:focus {\n  //   background-color: #7da2d6;\n  // }\n\n  &:hover {\n    cursor: pointer;\n    font-size: 118%;\n    font-weight: 700;\n  }\n\n  &:disabled {\n    background-color: rgb(255 255 255 / 0.9);\n    color: #005191;\n    border-color: #7da2d6;\n    cursor: not-allowed;\n    font-weight: normal;\n    &:hover {\n      font-size: 90%;\n    }\n  }\n`;\n\nconst QuestionListButton = styled.button`\n  color: #005191;\n  margin: 5px;\n  border: 0px;\n  min-height: 30px;\n  min-width: 175px;\n  text-align: left;\n  padding-left: 10%;\n  background-color: inherit;\n\n  &:focus {\n    background-color: inherit;\n  }\n\n  &:hover {\n    cursor: pointer;\n    font-size: 104%;\n    color: #005191;\n    font-weight: bold;\n  }\n\n  &:disabled {\n    font-weight: normal;\n    &:hover {\n      cursor: default;\n      font-size: 100%;\n    }\n  }\n`;\n\nconst Line = styled.hr`\n  background-color: #539ED0;\n  height: 1px;\n  border: none;\n}\n`;\n\nconst Arrow = styled.img`\n  margin-left: 2em;\n  width: 1em;\n`;\n\nconst QuestionListCard = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  background: rgb(255 255 255 / 0.9);\n  box-shadow: 0 0.25em 0.5em rgba(0, 0, 0, 0.5);\n  border-radius: 0.5em;\n`;\n\nconst ListHeading = styled.div`\n  padding: 6px 0;\n  color: #005191;\n  font-size: 1.75em;\n  font-weight: bold;\n  text-align: center;\n  font-family: 'Roboto Condensed', sans-serif;\n`;\n\nexport {\n  OptionButton,\n  NumberStr,\n  QuestionStr,\n  NavButton,\n  Container,\n  QuestionListButton,\n  QuestionListCard,\n  ListHeading,\n  Line,\n  Arrow,\n};\n","import React, {\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\ntype Callback<T> = (value?: T) => void;\ntype DispatchWithCallback<T> = (value: T, callback?: Callback<T>) => void;\n\nfunction useStateCallback<T>(\n  initialState: T | (() => T)\n): [T, DispatchWithCallback<SetStateAction<T>>] {\n  const [state, _setState] = useState(initialState);\n\n  const callbackRef = useRef<Callback<T>>();\n  const isFirstCallbackCall = useRef<boolean>(true);\n\n  const setState = useCallback(\n    (setStateAction: SetStateAction<T>, callback?: Callback<T>): void => {\n      callbackRef.current = callback;\n      _setState(setStateAction);\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (isFirstCallbackCall.current) {\n      isFirstCallbackCall.current = false;\n      return;\n    }\n    if (callbackRef.current) callbackRef.current(state);\n  }, [state]);\n\n  return [state, setState];\n}\n\nexport default useStateCallback;\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import React from 'react';\nimport {\n  NumberStr,\n  QuestionStr,\n  OptionButton,\n  ListHeading,\n  Line,\n} from '../../style/preposttest';\nimport { Card, Grid } from '../../style/styled';\n\nconst TestInfoCard = ({\n  stage,\n  setShowInfoCard,\n}: {\n  stage: string;\n  setShowInfoCard: any;\n}) => {\n  return (\n    <Card width=\"50vw\" style={{ margin: '20vh auto', padding: '2%' }}>\n      {stage == 'pretest' ? (\n        <ListHeading>HOW WELL DO YOU KNOW YOUR FINANCES?</ListHeading>\n      ) : (\n        <ListHeading>DID YOU LEARN SOMETHING NEW?</ListHeading>\n      )}\n      <Line />\n      <div style={{ fontSize: '1.1em', margin: '2%' }}>\n        {stage == 'pretest' ? (\n          <>\n            <div>\n              Before we start, let's see how much do you know about personal\n              finance.\n            </div>\n            <div>\n              We will ask you some questions. Answer each question based on your\n              current knowledge.\n            </div>\n          </>\n        ) : (\n          <>\n            <div>\n              Before we end this simulation, let's check how you opinions\n              regarding personal finance have changed.\n            </div>\n          </>\n        )}\n      </div>\n\n      <div\n        className=\"yellow-button\"\n        style={{ margin: '3% auto 0' }}\n        onClick={() => setShowInfoCard(false)}\n      >\n        Continue\n      </div>\n    </Card>\n  );\n};\n\nexport default TestInfoCard;\n","import React, { useEffect, useRef, useState } from 'react';\nimport Tests from '../../json/Tests.json';\nimport { TestLayout } from '../index';\nimport api from '../../api';\nimport useStateCallback from '../../utils/useStateCallback';\nimport TestInfoCard from './TestInfoCard';\n\ninterface Props {\n  stage: string;\n  setStage: Function;\n}\n\nconst useBackendConnection = (stage: string) => {\n  const [qNum, setQNum] = useStateCallback(null); //question number\n  const [selections, setSelections] = useStateCallback(new Array(11)); //selected answers\n  const [loading, setLoading] = useState(true);\n  const [showInfoCard, setShowInfoCard] = useState(false);\n\n  let store: any = useRef(); //used to access selections state in componentWillUnmount\n\n  useEffect(() => {\n    store.current = { stage, selections };\n    retriveTest();\n\n    /**\n     * componentWillUnmount\n     * Submits the answers to backend before unmounting\n     */\n    return () => {\n      let { stage, selections } = store.current;\n      submitAnswers(stage, selections);\n    };\n  }, []);\n\n  /**\n   * Updates the store ref\n   */\n  useEffect(() => {\n    store.current = { ...store.current, selections };\n  }, [selections]);\n\n  useEffect(() => {\n    console.log(showInfoCard);\n    if (qNum !== null) setLoading(false);\n  }, [qNum, showInfoCard, selections]);\n\n  const changePointer = (answers: Array<number>) => {\n    let current = 0;\n\n    if (answers.length > 0) {\n      current = answers.length - 1;\n    }\n\n    setQNum(current);\n  };\n\n  /**\n   * Retrive answers from backend\n   */\n  const retriveTest = () => {\n    api\n      .retriveTest(stage)\n      .then((res: Array<number>) => {\n        let x = res.length > 0 ? false : true;\n        setShowInfoCard(x);\n        setSelections(res);\n        changePointer(res);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  /**\n   * Submits the cuurent answers to backend\n   * @param testType \"pretest\" or \"posttest\"\n   * @param answers current answers\n   */\n  const submitAnswers = (testType: string, answers: any) => {\n    api.updateTest({\n      testType,\n      answers,\n    });\n  };\n\n  return {\n    qNum,\n    setQNum,\n    selections,\n    setSelections,\n    loading,\n    showInfoCard,\n    setShowInfoCard,\n  };\n};\n\nconst TestController = (props: Props): JSX.Element => {\n  //get questions & answers\n  const questionList = Tests.questions;\n  const answerList = Tests.answers;\n\n  const {\n    qNum,\n    setQNum,\n    selections,\n    setSelections,\n    loading,\n    showInfoCard,\n    setShowInfoCard,\n  } = useBackendConnection(props.stage);\n\n  const [answered, setAnswered] = useState('fade-out'); //for transition\n\n  /**\n   * Called by Save when answer selected, updates states, saves user selection\n   * @param qNumber    question # associated w question\n   * @param answer    user's selection\n   */\n  const storeSel = (qNumber: number, answer: number) => {\n    let temp = [...selections];\n    temp[qNumber] = answer;\n\n    setSelections(temp);\n  };\n\n  /**\n   * Called by [TestLayout]'s child component [QuestionCard] when user selects answer to question\n   * @param qNumber  question number\n   * @param answer  user's selection\n   */\n  const Save = (qNumber: number, answer: string) => {\n    console.log(qNumber);\n\n    storeSel(qNumber, parseInt(answer));\n  };\n\n  const nextStageConfirmation = () => {\n    let confirmed = window.confirm(\n      \"Are you sure you want to move to the next stage? \\nYou won't be able to change your answers.\"\n    );\n    if (confirmed) {\n      if (props.stage == 'pretest') props.setStage('simulation');\n    }\n  };\n\n  /**\n   * Navigate to next or previous question via [TestLayout]\n   */\n  const next = (withFinish: Boolean) => {\n    if (withFinish) nextStageConfirmation();\n    else {\n      setAnswered('fade-out active');\n      setTimeout(() => setAnswered('fade-out'), 300);\n      setTimeout(() => setQNum(qNum + 1), 300);\n    }\n  };\n\n  const back = () => {\n    setAnswered('fade-out active');\n    setTimeout(() => setAnswered('fade-out'), 300);\n    setTimeout(() => setQNum(qNum - 1), 300);\n  };\n\n  /**\n   * Navigate to specific question number via [TestLayout]'s child component [QuestionList]\n   * @param selected number of question user clicked\n   */\n  const set = (selected: number) => {\n    setAnswered('fade-out active');\n    setTimeout(() => setAnswered('fade-out'), 300);\n    setTimeout(() => setQNum(selected));\n  };\n\n  //consolidate props for children\n  const nav = { next, back, set };\n  const data = {\n    current: qNum,\n    questions: questionList,\n    answers: answerList,\n    selections: selections,\n    answered: answered,\n  };\n\n  if (loading) return null;\n  else if (showInfoCard) {\n    return (\n      <TestInfoCard stage={props.stage} setShowInfoCard={setShowInfoCard} />\n    );\n  } else {\n    return <TestLayout nav={nav} save={Save} data={data} />;\n  }\n};\n\nexport default TestController;\n"],"sourceRoot":""}