{"version":3,"sources":["components/signup/OrgLookup.tsx","components/signup/SignupForm.tsx"],"names":["OrgLookup","_ref","signUpUser","setSelectedOrganization","_useState","useState","_useState2","Object","slicedToArray","organizations","setOrganizations","_useState3","_useState4","disableSubmit","setdisableSubmit","useEffect","api","getOrganizationNames","then","res","success","temp","i","length","push","name","concat","alert","message","catch","err","react_default","a","createElement","Fragment","className","id","onChange","e","target","value","style","display","marginTop","marginBottom","hidden","disabled","selected","map","org","onClick","preventDefault","SignupForm","SignupAPI","fname","lname","email","basicInfo","setBasicInfo","password","setPassword","_useState5","_useState6","cPassword","setcPassword","_useState7","_useState8","acceptable","setAcceptable","_useState9","_useState10","orgListState","setOrgListState","_useState11","_useState12","organization","setOrganization","emailRef","React","createRef","cPasswordRef","infoHandler","event","currentTarget","objectSpread","defineProperty","emailChecker","error","test","String","toLowerCase","validateEmail","type","setError","updateAcceptableValues","ref","showError","color","current","borderBottomColor","passwordChecker","len","substring","isAcceptable","height","src","signup_background","signup_OrgLookup","lastName","firstName","onSubmit","placeholder","marginRight","onBlur","gridColumn","gridTemplateColumns","values","includes","fontSize","padding","alignSelf","textAlign","paddingTop","react_router_dom","to"],"mappings":"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","file":"static/js/19.a0ae76a0.chunk.js","sourcesContent":["import React, { SetStateAction, useEffect, useState } from 'react';\nimport api from '../../api';\n\ntype props = {\n  signUpUser: () => void;\n  setSelectedOrganization: any;\n};\n\n/**\n * Third part of the submit form. Called by SignupForm.tsx\n * Makes the user select an option from a list of organizations retrieved from the backend\n * @param signUpUser Function to aggregate all entered data and initiate an API call\n * @param setSelectedOrganization Update state of SignupForm.tsx\n */\nconst OrgLookup = ({ signUpUser, setSelectedOrganization }: props) => {\n  /**\n   * List of avialable organizations\n   */\n  const [organizations, setOrganizations] = useState([]);\n  /**\n   * Form disabled or active flag.\n   * set to \"false\" when an organization is selected\n   */\n  const [disableSubmit, setdisableSubmit] = useState<boolean>(true);\n\n  useEffect(() => {\n    // API call\n    api\n      .getOrganizationNames()\n      .then(\n        (res: {\n          success: boolean;\n          message: string;\n          organizations: Array<{ _id: string; name: string; __v: number }>;\n        }) => {\n          if (res.success) {\n            let temp: any = [];\n\n            for (var i = 0; i < res.organizations.length; i++) {\n              temp.push(res.organizations[i].name);\n            }\n\n            setOrganizations([...temp]);\n          } else {\n            alert(res.message);\n          }\n        }\n      )\n      .catch((err) => {\n        alert(err);\n        setOrganizations([]);\n      });\n  }, []);\n\n  /**\n   * Function to create dropdown options from organizations array\n   */\n  const getOptions = () => {\n    return organizations.map((org) => {\n      return <option>{org}</option>;\n    });\n  };\n\n  return (\n    <>\n      <form className=\"auth-form \">\n        <div className=\"desc-title blue-text-dark\">\n          Choose your school/organization\n        </div>\n        <select\n          name=\"\"\n          id=\"\"\n          onChange={(e) => {\n            setdisableSubmit(false); // Make the submit button active\n            setSelectedOrganization(e.target.value); // Update the selected organization\n          }}\n          style={{ display: 'block', marginTop: '1em', marginBottom: '1em' }}\n        >\n          <option hidden disabled selected>\n            -- select an option --\n          </option>\n          {getOptions()}\n        </select>\n        <button\n          className=\"yellow-button\"\n          disabled={disableSubmit}\n          onClick={(e) => {\n            e.preventDefault();\n            signUpUser(); // API call\n          }}\n        >\n          Submit\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default OrgLookup;\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { signup_background } from 'assets';\nimport OrgLookup from './OrgLookup';\n\n/**\n * A Signup form asking user for account details\n * @param SignupAPI Function for API call that performs signup user action\n */\nconst SignupForm = ({ SignupAPI }: { SignupAPI: (values: any) => void }) => {\n  const [basicInfo, setBasicInfo] = useState({\n    fname: '',\n    lname: '',\n    email: '',\n  });\n\n  const [password, setPassword] = useState('');\n  const [cPassword, setcPassword] = useState('');\n\n  // Which fields have valid values\n  const [acceptable, setAcceptable] = useState({\n    fname: false,\n    lname: false,\n    email: false,\n    password: false,\n    cPassword: false,\n  });\n\n  const [orgListState, setOrgListState] = useState(false); // Show <OrgLookup />?\n  const [organization, setOrganization] = useState(''); // User's organization\n\n  const emailRef: React.RefObject<HTMLInputElement> = React.createRef();\n  const cPasswordRef: React.RefObject<HTMLInputElement> = React.createRef();\n\n  /**\n   * Updates \"basicInfo\" state based on new data\n   * @param event Onchange event of input fields\n   */\n  const infoHandler = (event: React.FormEvent<HTMLInputElement>) => {\n    let { name } = event.currentTarget;\n    setBasicInfo({ ...basicInfo, [name]: event.currentTarget.value });\n  };\n\n  /**\n   * Propts the display of <OrgLookup />\n   * @param event Form submit event\n   */\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setOrgListState(true);\n  };\n\n  /**\n   * Calls the SignupAPI with form data\n   */\n  const signUpUser = () => {\n    SignupAPI({\n      password,\n      organization,\n      email: basicInfo.email,\n      lastName: basicInfo.lname,\n      firstName: basicInfo.fname,\n    });\n  };\n\n  /**\n   * Regex Function to check the validity of email provided\n   * @param email email provided by user\n   */\n  function validateEmail(email: string) {\n    const re =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n\n  /**\n   * Function to check email validity and show error in email field if needed\n   * @param event event created by the email field\n   */\n  const emailChecker = (event: React.FormEvent<HTMLInputElement>) => {\n    let email = event.currentTarget.value;\n\n    // Empty field means no error\n    let error = email.length !== 0 && !validateEmail(email) ? true : false;\n\n    if (event.type !== 'change' || !error) {\n      setError(emailRef, error);\n    }\n\n    updateAcceptableValues(!error, 'email', basicInfo.email);\n  };\n\n  /**\n   * Function to show a red underline in an input field with invalid data\n   * @param ref Reference of the input field\n   * @param showError whether to show error or not\n   */\n  const setError = (\n    ref: React.RefObject<HTMLInputElement>,\n    showError: boolean\n  ) => {\n    let color = showError ? 'red' : '#9e9e9e';\n\n    ref.current.style.borderBottomColor = color;\n  };\n\n  useEffect(() => {\n    setcPassword(''); // Change in pasword clears the cPassword field\n  }, [password]);\n\n  useEffect(() => {\n    passwordChecker();\n  }, [cPassword]);\n\n  /**\n   * Compares \"confirm password\" field to the password field\n   */\n  const passwordChecker = () => {\n    let len = cPassword.length;\n\n    let error =\n      len > password.length ||\n      password.substring(0, len) !== cPassword.substring(0, len)\n        ? true\n        : false;\n\n    setError(cPasswordRef, error); //Show error in the field\n    if (!error && password === cPassword) {\n      updateAcceptableValues(true, 'cPassword', cPassword);\n    } else {\n      updateAcceptableValues(false, 'cPassword', cPassword);\n    }\n  };\n\n  /**\n   * Updates \"acceptable\" state\n   * @param isAcceptable is field acceptable?\n   * @param name Name of the field\n   * @param value Value of the field\n   */\n  const updateAcceptableValues = (\n    isAcceptable: boolean,\n    name: string,\n    value: string\n  ) => {\n    if (isAcceptable && value.length > 0) {\n      setAcceptable({\n        ...acceptable,\n        [name]: true,\n      });\n    } else setAcceptable({ ...acceptable, [name]: false });\n  };\n\n  return (\n    <div style={{ height: '100vh', display: 'flex' }}>\n      <div className=\"login-form-container\">\n        <img src={signup_background} style={{ height: '100%' }} />\n\n        {orgListState ? (\n          <OrgLookup\n            signUpUser={signUpUser}\n            setSelectedOrganization={setOrganization}\n          />\n        ) : (\n          <form className=\"auth-form signup-form \" onSubmit={handleSubmit}>\n            <input\n              className=\"login-input \"\n              placeholder={'First Name'}\n              value={basicInfo.fname}\n              style={{ marginRight: '1em' }}\n              onChange={infoHandler}\n              onBlur={() =>\n                updateAcceptableValues(true, 'fname', basicInfo.fname)\n              }\n              name=\"fname\"\n            />\n            {/* sets the uers password to the input value */}\n            <input\n              className=\"login-input\"\n              placeholder={'Last Name'}\n              value={basicInfo.lname}\n              onChange={infoHandler}\n              name=\"lname\"\n              onBlur={() =>\n                updateAcceptableValues(true, 'lname', basicInfo.lname)\n              }\n            />\n            <input\n              className=\"login-input\"\n              placeholder={'Email'}\n              ref={emailRef}\n              value={basicInfo.email}\n              name=\"email\"\n              style={{ gridColumn: '1/span 2' }}\n              onChange={(e) => {\n                infoHandler(e);\n                emailChecker(e);\n              }}\n              onBlur={emailChecker}\n            />\n            <input\n              className=\"login-input \"\n              placeholder={'Password'}\n              type=\"password\"\n              style={{ marginRight: '1em' }}\n              name=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              onBlur={() => updateAcceptableValues(true, 'password', password)}\n            />\n            <input\n              className=\"login-input \"\n              placeholder={'Confirm Password'}\n              type=\"password\"\n              style={{ marginRight: '1em' }}\n              name=\"confirm_password\"\n              ref={cPasswordRef}\n              value={cPassword}\n              onChange={(e) => setcPassword(e.target.value)}\n            />\n\n            <div\n              style={{\n                gridColumn: '1/span 2',\n                display: 'grid',\n                gridTemplateColumns: '1fr 1fr',\n                marginTop: '1em',\n              }}\n            >\n              <button\n                className=\"yellow-button\"\n                disabled={\n                  Object.values(acceptable).includes(false) ||\n                  Object.values(acceptable).includes(null)\n                    ? true\n                    : false\n                }\n                type=\"submit\"\n                style={{\n                  fontSize: '1.25em',\n                  padding: '.25em 1em',\n                  alignSelf: 'center',\n                }}\n              >\n                NEXT\n              </button>\n              <div\n                style={{\n                  textAlign: 'right',\n                  paddingTop: '4%',\n                  color: '#005191',\n                }}\n              >\n                <Link to=\"/\">Back to Sign In</Link>\n              </div>\n            </div>\n          </form>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SignupForm;\n"],"sourceRoot":""}