{"version":3,"sources":["components/jobs/Spinner.tsx"],"names":["Spinner","_ref","getJobDetail","_useState","useState","_useState2","Object","_mnt_c_Users_ashis_Financial_App_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","spinning","setSpinning","_useState3","_useState4","loading","setLoading","_useState5","_useState6","selection","setSelection","_useState7","_useState8","jobOptions","setJobOptions","useEffect","api","getJobNames","then","res","catch","err","console","log","setTimeout","length","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","src","spinner","concat","style","width","height","Fragment","onClick","display","selected","arguments","undefined","nextStep"],"mappings":"8IAmGeA,UA1FC,SAAAC,GAAwC,IAArCC,EAAqCD,EAArCC,aAAqCC,EACtBC,oBAAS,GADaC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC/CK,EAD+CH,EAAA,GACrCI,EADqCJ,EAAA,GAAAK,EAExBN,oBAAkB,GAFMO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE/CE,EAF+CD,EAAA,GAEtCE,EAFsCF,EAAA,GAAAG,EAGpBV,oBAAU,GAHUW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAG/CE,EAH+CD,EAAA,GAGpCE,EAHoCF,EAAA,GAAAG,EAIlBd,mBAAS,IAJSe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAI/CE,EAJ+CD,EAAA,GAInCE,EAJmCF,EAAA,GAStDG,oBAAU,WACRC,IACGC,cACAC,KAAK,SAACC,GACLL,EAAcK,GACdb,GAAW,KAEZc,MAAM,SAACC,GACNC,QAAQC,IAAIF,MAEf,IAkBHN,oBAAU,WACJd,GACFuB,WAAW,WACTd,GAAcD,EAAY,GAAKI,EAAWY,SACzC,MAEJ,CAAChB,IAUJ,OAAIJ,EAAgB,KAGhBqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAASF,UAAU,YAC7BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QACEC,UAAS,GAAAG,OAAK/B,EAAW,gBAAkB,oBAC3CgC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAEhB,IAAf1B,EAAmBI,EAAWJ,GArCrCiB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAS,SAAA,wBAEEV,EAAAC,EAAAC,cAAA,WAFF,IAESF,EAAAC,EAAAC,cAAA,WAFT,sDAwCEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UACES,QAAS,WACFpC,IACHS,EAAa,GACbR,GAAY,MAJlB,QAUAwB,EAAAC,EAAAC,cAAA,QAAMK,MAAO,CAAEK,QAAS,eAAgBJ,MAAO,SAC/CR,EAAAC,EAAAC,cAAA,UACES,QAAS,WACPpC,GA/BK,WAA2C,IAA1CsC,EAA0CC,UAAAf,OAAA,QAAAgB,IAAAD,UAAA,GAAAA,UAAA,GAA1B3B,EAAWJ,GAC3Cd,EAAa4C,GAAU,GA8BDG,KAFhB","file":"static/js/18.0fab4f9f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { spinner } from 'assets';\nimport api from '../../api';\n\n/**\n * @author: Ashish DEv\n * @desc: Called by RunSimulation.tsx to show the spinning element where the palyer chooses a job.\n * @param getJobDetail: Function to set the new career and to move the selection to next step\n */\nconst Spinner = ({ getJobDetail }: any): JSX.Element => {\n  const [spinning, setSpinning] = useState(false);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [selection, setSelection] = useState(-1);\n  const [jobOptions, setJobOptions] = useState([]); // Job options available to players\n\n  /**\n   * gets the jobOptions from backend and set loading to false\n   */\n  useEffect(() => {\n    api\n      .getJobNames()\n      .then((res) => {\n        setJobOptions(res);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  /**\n   * Opening Statement of the spinner\n   */\n  const getOpeningStatement = () => {\n    return (\n      <>\n        CHOOSE YOUR JOB!\n        <br /> <br />\n        Hit SPIN to start and STOP to choose your Career\n      </>\n    );\n  };\n\n  /**\n   * Periodically changes the option displayed on screen by increasing value of \"selection\"\n   */\n  useEffect(() => {\n    if (spinning) {\n      setTimeout(() => {\n        setSelection((selection + 1) % jobOptions.length);\n      }, 200);\n    }\n  }, [selection]);\n\n  /**\n   * Uses getJobDetail function to set the career of the user and moves the simulation to next step.\n   * @param selected The job selected by user.\n   */\n  const nextStep = (selected: any = jobOptions[selection]) => {\n    getJobDetail(selected, true);\n  };\n\n  if (loading) return null;\n  else\n    return (\n      <div className=\"spinnerContainer\">\n        <img src={spinner} className=\"spinner\" />\n        <div className=\"spinnerText\">\n          <span\n            className={`${spinning ? 'wheel-animate' : 'wheel-stationary'}`}\n            style={{ width: '100%', height: '80%' }}\n          >\n            {selection !== -1 ? jobOptions[selection] : getOpeningStatement()}\n          </span>\n        </div>\n        <div className=\"spinnerButtons\">\n          <button\n            onClick={() => {\n              if (!spinning) {\n                setSelection(0);\n                setSpinning(true);\n              }\n            }}\n          >\n            SPIN\n          </button>\n          <span style={{ display: 'inline-block', width: '30%' }}></span>\n          <button\n            onClick={() => {\n              spinning && nextStep();\n            }}\n          >\n            STOP\n          </button>\n        </div>\n      </div>\n    );\n};\n\nexport default Spinner;\n"],"sourceRoot":""}