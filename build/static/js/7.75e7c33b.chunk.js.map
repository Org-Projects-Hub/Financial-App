{"version":3,"sources":["components/booth/BoothOption.tsx","components/booth/Booth.tsx","store/action/backButtonActions.ts"],"names":["styled","div","_templateObject","_templateObject2","Heading","_templateObject3","BoothOption","_templateObject4","_ref","name","icon","desc","costBreakdown","price","increaseExpenses","setSimStage","currentBalance","lowestprice","setText","console","log","react_default","a","createElement","className","src","map","store","i","concat","style","height","piece","key","item","onClick","window","scrollTo","BoothIcons","clothingIcon","housingIcon","transportationIcon","charityIcon","foodIcon","temptationIcon","insuranceIcon","MyGrid","Booth_templateObject","Span","Booth_templateObject2","Info","Booth_templateObject3","Icons","money1","money2","money3","money4","Booth","currentBooth","booths","remainingBalance","_useState","useState","_useState2","Object","slicedToArray","loading","setLoading","_useState3","_useState4","optionsArray","setOptionsArray","_useState5","_useState6","text","_useState7","_useState8","_useState9","_useState10","setLow","_useState11","_useState12","boothName","setBoothName","dispatch","useDispatch","array","Array","useEffect","func","booth","category","j","options","length","boothOption","x","costbreakdown","type","actionTypes","SHOW_BACK_FUNCTION","ADD_BACK_FUNCTION","payload","HIDE_BACK_FUNCTION","gridRow","gridColumn","display","gridTemplateColumns","booth_BoothOption"],"mappings":"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","file":"static/js/7.75e7c33b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Grid, Card, NavButton } from '../../style/styled';\nimport '../../style/Booth.css';\nimport styled from 'styled-components';\n\ntype Props = {\n  name: string;\n  desc: string[];\n  costBreakdown: string[];\n  price: Number;\n};\n// const MyCard = styled(Card)`\n//   display: grid;\n//   width: 90%;\n//   height: 90%;\n//   box-sizing: content-box;\n//   grid-template-rows: auto;\n//   margin: 5% 0px;\n//   justify-items: center;\n// `;\n\nconst Name = styled.div`\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 6px;\n  text-align: center;\n`;\n\nconst Desc = styled.div`\n  margin: 3px;\n`;\n\nconst Heading = styled.div`\n  text-align: left;\n  margin-top: 5px;\n\n  font-family: 'Roboto Condensed', sans-serif;\n  font-weight: 600;\n  font-size: 18px;\n  justify-content: left;\n`;\n\nconst Warning = styled.div`\n  padding: 0%;\n`;\n\nconst HorLine = () => (\n  <hr\n    style={{\n      borderTop: '1px',\n      color: '#1f3d7d',\n      marginTop: '5px',\n    }}\n  />\n);\n\nconst BoothOption = ({\n  name,\n  icon,\n  desc,\n  costBreakdown,\n  price,\n  increaseExpenses,\n  currentBalance,\n  setSimStage,\n  setText,\n  lowestprice,\n}: any): JSX.Element => {\n  function buy() {\n    window.scrollTo(0, 0);\n    increaseExpenses(price);\n    setSimStage('Booth-Selection');\n    // if (currentBalance > price) {\n    //   window.scrollTo(0, 0);\n    //   increaseExpenses(price);\n    //   setSimStage('Booth-Selection');\n    // } else if (currentBalance < price) {\n    //   setText('You do not have enough money to purchase this');\n    // }\n  }\n\n  console.log('LOWEST PRICE: ' + lowestprice);\n\n  const showCostBreakdown = () => {\n    return costBreakdown.map(\n      (piece: string | { item: string; price: number }, i: number) => {\n        if (typeof piece == 'string') return <div key={i}>All Inclusive</div>;\n        else {\n          return (\n            <div key={i}>\n              {piece.item} : ${piece.price}\n            </div>\n          );\n        }\n      }\n    );\n  };\n\n  return (\n    <div className=\"boothItemOption\">\n      <div className=\"section\">\n        <img src={icon} className=\"boothItemIcon\" />\n        <Heading>{name}</Heading>\n      </div>\n\n      <div className=\"section\">\n        {desc.map((store: string, i: Number) => (\n          <span>{`${store} | `}</span>\n        ))}\n      </div>\n      <div className=\"section\" style={{ height: 'auto' }}>\n        <Heading>Cost Breakdown</Heading>\n\n        {showCostBreakdown()}\n      </div>\n      <div className=\"section\">\n        <Heading>Total Price</Heading>\n        <div>${price}</div>\n      </div>\n\n      <div className=\"verticalFill\"></div>\n\n      <div className=\"section\">\n        <div className=\"customButton\" onClick={() => buy()}>\n          PURCHASE\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BoothOption;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport BoothOption from './BoothOption';\n\nimport { useDispatch } from 'react-redux';\nimport {\n  showBackFunction,\n  hideBackFunction,\n  changeBackFunction,\n} from '../../store/action/backButtonActions';\n\nimport {\n  money1,\n  money2,\n  money3,\n  money4,\n  rev_housingIcon as housingIcon,\n  rev_clothingIcon as clothingIcon,\n  rev_charityIcon as charityIcon,\n  rev_foodIcon as foodIcon,\n  rev_insuranceIcon as insuranceIcon,\n  rev_transportationIcon as transportationIcon,\n  rev_temptationIcon as temptationIcon,\n} from 'assets';\n\nconst BoothIcons = [\n  clothingIcon,\n  housingIcon,\n  transportationIcon,\n  charityIcon,\n  foodIcon,\n  temptationIcon,\n  insuranceIcon,\n];\n\ninterface boothOptions {\n  name: string;\n  desc: string[];\n  costbreakdown: string[];\n  price: number;\n}\n\nconst MyGrid = styled.div`\n  display: grid;\n  place-items: center;\n  grid-template-columns: repeat(3, 1fr);\n  grid-grap: 1em;\n  max-width: 80vw;\n  margin: auto;\n  margin-top: 5%;\n  grid-auto-rows: auto;\n  @media (max-width: 770px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nconst Span = styled.div`\n  margin: 3% 0 1% 0;\n  color: white;\n  display: flex;\n  grid-row: 1/1;\n  grid-column: 1/3;\n  width: 100%;\n  justify-self: left;\n`;\n\nconst Info = styled.div`\n  padding-left: 2.5%;\n  color: #fffefd;\n  font-weight: 500;\n  grid-row: 2/2;\n  grid-column: 1/3;\n  justify-self: left;\n`;\n\nconst Icons: any[] = [money1, money2, money3, money4];\n\nconst Booth = ({\n  setSimStage,\n  currentBooth,\n  booths,\n  increaseExpenses,\n  currentBalance,\n  remainingBalance,\n}: any): JSX.Element => {\n  const [loading, setLoading] = useState(true);\n  const [optionsArray, setOptionsArray] = useState([]);\n  const [text, setText] = useState(null);\n  const [priceArray, setPriceArray] = useState([]);\n  const [lowestprice, setLow] = useState(999999999999);\n  const [boothName, setBoothName] = useState('');\n  const dispatch = useDispatch();\n\n  var array = new Array();\n\n  /**Setting the javaSCript array to the options array react hook*/\n  useEffect(() => {\n    var booth = booths[currentBooth - 1]; //used for readability\n\n    setBoothName(booth.category);\n\n    for (var j = 0; j < booth.options.length; j++) {\n      //read through the options array of the current booth\n\n      var boothOption = booth.options[j]; //used for readability\n\n      let x: boothOptions = {\n        name: boothOption.name,\n        desc: boothOption.desc,\n        costbreakdown: boothOption.costbreakdown,\n        price: boothOption.price,\n      };\n\n      if (lowestprice > boothOption.price) {\n        setLow(boothOption.price);\n      }\n\n      /**\n       * Save the current option data into the array (where array index = the boothOptions id)\n       * passing an object with the name, desc, costbreakdown, and price\n       */\n      array[j] = x;\n    }\n\n    setOptionsArray(array);\n    setLoading(false);\n    dispatch(showBackFunction());\n    dispatch(\n      changeBackFunction(() => {\n        setSimStage('Booth-Selection');\n      })\n    );\n\n    return () => {\n      dispatch(hideBackFunction());\n    };\n  }, []);\n\n  if (loading) {\n    return null;\n  } else {\n    return (\n      <MyGrid>\n        <Span>\n          <img src={BoothIcons[currentBooth]} className=\"curentBoothIcon\" />\n          <div className=\"currentBoothIdentifier\">\n            The Current Booth is {`${boothName}.`}\n          </div>\n        </Span>\n        <Info>Remaining Balance: {remainingBalance}</Info>\n        <div\n          style={{\n            gridRow: '3/3',\n            gridColumn: '1/4',\n            height: 'fit-content',\n            display: 'grid',\n            gridTemplateColumns: 'repeat(3,1fr)',\n          }}\n        >\n          {optionsArray.map((optionsArray: any, i) => (\n            <BoothOption\n              name={optionsArray.name}\n              icon={Icons[i]}\n              desc={optionsArray.desc}\n              costBreakdown={optionsArray.costbreakdown}\n              price={optionsArray.price}\n              increaseExpenses={increaseExpenses}\n              currentBalance={currentBalance}\n              setSimStage={setSimStage}\n              setText={setText}\n              lowestprice={lowestprice}\n              key={i}\n            />\n          ))}\n        </div>\n        {text}\n      </MyGrid>\n    );\n  }\n};\n\nexport default Booth;\n","import actionTypes from './actionTypes';\n\nexport const changeBackFunction = (func: Function) => {\n  return {\n    type: actionTypes.ADD_BACK_FUNCTION,\n    payload: func,\n  };\n};\n\nexport const showBackFunction = () => {\n  return {\n    type: actionTypes.SHOW_BACK_FUNCTION,\n  };\n};\n\nexport const hideBackFunction = () => {\n  return {\n    type: actionTypes.HIDE_BACK_FUNCTION,\n  };\n};\n"],"sourceRoot":""}